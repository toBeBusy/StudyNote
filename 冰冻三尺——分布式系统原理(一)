博客地址：http://www.chinacloud.cn/show.aspx?id=22076&cid=12
ACID 特性
　　A(原子性)事务的原子操作单元，对数据的修改，要么全部执行，要么全部不执行;
　　C(一致性)在事务开始和完成时，数据必须保持一致状态，相关的数据规则必须应用于事务的修改，
以保证数据的完整性，事务结束时，所有的内部数据结构必须正确;
　　I(隔离性)保证事务不受外部并发操作的独立环境执行;
　　D(持久性)事务完成之后，对于数据的修改是永久的，即使系统出现故障也能够保持;

CAP
　　C(一致性)一致性是指数据的原子性，在经典的数据库中通过事务来保障，事务完成时，无论成功或
回滚，数据都会处于一致的状态，在分布式环境下，一致性是指多个节点数据是否一致;
　　A(可用性)服务一直保持可用的状态，当用户发出一个请求，服务能在一定的时间内返回结果;
　　P(分区容忍性)在分布式应用中，可能因为一些分布式的原因导致系统无法运转，好的分区容忍性，
使应用虽然是一个分布式系统，但是好像一个可以正常运转的整体。

BASE
   BA: Basic Availability 基本业务可用性;
　　S: Soft state 柔性状态;
　　E: Eventual consistency 最终一致性;



    透明性(transparent)：如果一个分布式系统能够在用户和应用程序面前呈现为单个计算机系统，这样
的分布式系统就称为是透明的。
	访问透明性(access transparency)：对不同数据表示形式以及资源访问方式的隐藏。
	位置透明性(location transparency): 用户无法判别资源在系统中的物理位置。
	迁移透明性(migration transparency): 如果分布式系统中的资源移动不会影响该资源的访问方式，
就可以说这种分布式系统能提供迁移透明性。
	重定位透明性(relocation transparency): 资源可以在接受访问的同时进行重新定位，而不引起用户
和应用程序的注意，会使系统更加强壮。
	复制透明性(replication transparency): 对同一个资源存在多个副本这样一个事实的隐藏。
	并发透明性(concurrency transparency)：让任何一个用户都不会感觉到他人也在使用自己正在使用
的资源。
	故障透明性(failure transparency)：用户不会注意到某个资源无法正常工作，以及系统随后从故障中
恢复的过程。
	在设计并实现分布式系统时，把实现分布的透明性作为目标是正确的，但是应该将它和其他方面的问题
(比如性能)结合起来考虑。



	三种扩展技术：隐藏通信等待时间，分布技术以及复制技术。
	隐藏通信等待时间：尽量避免等待远程服务对请求的响应。大部分的解决方案是异步通信。
	分布技术：把某个组件分割成多个部分，然后再将它们分散到系统中去。
	复制技术：对组件进行复制并将副本分布到系统各处。缓存(caching)是复制的一种特殊形式。缓存和复
制都存在严重的缺点，由于资源存在多个副本，修改其中的一个会导致它与其他副本不相同，从而导致一致性
(consistency)方面的问题。
	可以在多大程度上容忍不一致性主要取决于资源的用法，通过复制来提高可扩展性将会引入另一种本质上
不可扩展的解决方案。


	分布式计算系统可以分成两个子分组：集群计算(cluster computing)和网格计算(grid computing)。
	集群计算(cluster computing)：底层硬件是由类似的工作站或PC集组成，通过高速的局域网紧密连接起来
的。而且，每个结点运行的是相同的操作系统。
	网格计算(gird computing): 组成分布式系统的这种子分组通常构建成一个计算机系统联盟，其中的每个
系统归属于不同的管理域，而且在硬件、软件和部署网络技术上也差别很大。



	消息队列系统：
	消息队列系统为持久异步通信提供多种支持，这类系统的本质是，提供消息的中介存储能力，这样就不
需要消息发送方和接收方在消息传输过程中都保持激活状态。消息队列系统的设计目标一般是支持那些时间
要求较为宽松的消息传输，比如那些要求几分钟完成的传输，而不适用于那些必须在几秒内甚至几微秒内完
成的传输。
	消息队列系统的重要特征之一是，通常只能确保发送方发出的消息最终能够插入到接收方的队列中，并
不保证消息到大的时间，甚至不保证消息一定会得到读取，这完全由接收方来决定。

	
	分布式系统之间的互斥：
	分布式系统的基础是多进程之间的并发和协作。在很大情况下，这也意味着进程将需要同时访问相同的
资源。为了保证这种并发访问不会崩溃资源或使得它不一致，需要一些解决办法来保证进程的互斥访问。
	分布式系统互斥算法可以分为两种不同的类型。在基于令牌的解决方法中，互斥是通过在进程之间传递
一个特殊的消息来实现的，这个消息称为令牌(token)。这里只有一个令牌，拥有该令牌的进程就准许访问
共享资源。完成后把该令牌传递给下一个进程。如果某个进程拥有该令牌，但不需要访问资源，那么它就
只是把该令牌往下传递。
	基于令牌的解决方法有一些重要的特性。首先，按照进程的组织结构，可以很容易地确保每个进程都有
机会访问资源。第二，由于简单，可以很容易地避免死锁。但是，基于令牌的解决方法有一个重大缺陷，
如果令牌丢失，就需要重新开启一个复杂的分布式进程，以确保创建一个新的令牌，但总之，这也是唯一的
一个令牌。

	另外，很多分布式系统遵循基于许可的方法，在这种情况下，一个进程如果需要访问资源，首先需要
获得其他进程的许可。













