1.@Component
	1)注解，将类委托给Spring托管。
	2)@Component("beanName"),设置bean的ID。

2.@Autowired
	1)@Autowired标签可以写在方法上，相当于给方法的入参设置Bean。
	2)@Autowired标签可以设置required为false，不然如果找不到bean，就会报错。
	3)@Autowired标签如果有多个Bean可以满足要求的话，Spring将会抛出一个异常，表明没有
明确的指定要选择哪个bean进行自动装配。
	4)@Autowired标签和@Inject标签在大多数场景下，可以互换。
	
3.通过Java代码装配Bean：
	有时候需要将第三方库中的组件装配到你的应用中，在这种情况下，是没有办法在它的类上
添加@Component和@Autowired注解的，因此就不能使用自动化装配的方案了。可以通过JavaConfig
来显示的配置Spring。
	1)创建配置JavaConfig类，一定要加上@Configuration标签，表明这个类是一个配置类，该类
应该包含在Spring应用上下文中如何创建Bean的细节。在JavaConfig类中编写Bean的生成类并标注
@Bean(name="beanName")标签。
	例：
	@Bean(name = "beanName")
	public Bean getBean(){
		return new Bean();
	}
	默认情况下这种Bean的ID与带有@Bean注解的方法名是一样的，但是可以通过name属性来改变
Bean的ID。
	注意！因为getBean()方法上添加了@Bean注解，Spring将会拦截所有对它的调用，并确保直接
返回该方法所创建的bean，而不是每次都对其进行实际的调用。因此，每次调用getBean()方法
返回的都是一个Bean。
	
4.@Import和@ImportResource标签,作用在JavaConfig类上。
	例：@Improt(CDPlayerConfig.class)
		@ImportResource("classpath:cd-config.xml")
		
5.@Profile("dev")标签。