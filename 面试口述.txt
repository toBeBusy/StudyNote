1.信用额度模块
	刚进公司不到一个星期，熟悉了相关技术，开始搬砖，搭建信用额度模块工程。
信用额度模块的相关业务是：
	1)门店在工厂拿货，开始不用付钱，商品销售完才分钱。因此每个门店在工厂有
一个预支货款的额度。 同时，工厂还能授予门店临时额度。如果存在临时额度，那么
扣款时先扣临时额度，临时额度扣完才扣永久额度。缺点：临时额度到期没还上，怎
么办？
	此外，门店在平台也有一个预支货款的总额度，就是该门店在所
有工厂的预支款之和不能超过该门店在平台的额度。

	额度模块与订单模块的交互用的是二阶段提交来保证一致性，分区容错性，可用性。
	订单模块每卖出一件商品发送kafka消息给额度模块恢复额度。订单模块发送kafka
消息时会在本地数据库做记录。额度模块接到订单模块发来的消息后，先保存到本地数
据库，然后额度模块启动一个线程扫描记录kafka消息的表，来处理增加额度的操作。
并将操作的结果(成功或失败)发送给订单模块。这种做法有个缺点，额度模块要有线程
在一直扫描kafka消息表，这样tps不高。后来网上看有一种解决方法是额度模块收到
kafka的消息之后先落地，然后再发送一条消息让别的线程来处理这个事务。
	订单模块与商品模块之间的交互工作也是我做的。原理基本与额度模块相同。
	后来上网查了二阶段提交。两个系统之间的交互还有改进空间。比如，同一笔订单
如果额度模块扣额度成功，商品模块扣库存失败。那么订单模块应该发kafka消息给额
度模块，来回滚之前的操作。

2.结算模块
	信用额度模块做完之后，参与结算模块的开发工作。主要是查询一些临时报表。比如：
日结算清单，分账结果查询等。结算模块主要的工作流程是记账和分账。每销售一个商品
做一笔记录。每天晚上跑一下定时任务。把每一笔订单按照工厂，门店，平台的分润比进
行计算并记录计算结果。分账就是每个月(时间不固定)根据记账的结果把钱打给工厂，门店，
平台的账户。
	
3.支付模块开发(待优化)
	对接快钱接口，实现支付功能。由于我们公司的体制问题，没有对接支付宝和微信。
只对接了一个快钱。
	快钱的支付接口，需要上传公钥到快钱服务器，同时我们服务器保存快钱的公钥。每次
发送支付数据给快钱，需要进行加签，对整个请求进行加签。在请求末尾增加sign参数。
接口接收到快钱的支付结果也需要进行验签。验签成功才开始后续操作。

4.小程序数据看板
	万达小程序app的数据展示，包括已上架商品数，已上架券数量，流量分析(浏览量、
浏览人数、登录用户数、新注册用户数)，券统计(领取次数，领取人数，核销次数，核销人
数)。项目主要包含两个独立的模块。一个collect用于从大数据部门提供的接口取数据，并
插入到moongodb。另一个portal用于从mongodb取数据，经过过滤，分组等再传给前端展示。
collect主要是两个定时器任务，其中一个每天跑一次，从大数据接口取前一天的数据，插入
mongodb。
	从别的部门接手的，做得很烂，改造后上线。
	问题：
	1.定时器任务较多，串行执行，速度较慢。配了线程池之后可以并行执行。
	2.mongodb,每次插入一个对象，改为批量插入，会提升效率。
	3.mongodb换成mysql，更熟悉。
	4.访问千帆接口，会增加时间，并使程序依赖于外部实现。
